S=stl(X,"per")$time.series[,"seasonal"]
T=stl(X,"per")$time.series[,"trend"]
a=1
b=1
eps=rnorm(100)
X=1:100
for (t in 1:100)
{
X[t]=a+b*t+eps[t]
}
X.ts=ts(X)
acf(X.ts)
X
S=stl(X,"per")$time.series[,"seasonal"]
S=stl(X,"per")$time.series[,"seasonal"]
S=stl(X,"per")$time.series[,"seasonal"]
S=stl(X,"per")$time.series[,"seasonal"]
?stl
str(X)
str(gtemp)
str(gtemp)
library(astsa)
X=gtemp
str(gtemp)
str(X)
T=stl(X,"per")$time.series[,"trend"]
stl(AirPassengers)
stl(AirPassengers,"per")
lines(filter(X,rep(1/13,13), col='green')
T=stl(X,"per")$time.series[,"trend"]
lines(filter(X,rep(1/13,13), col='green'))
lines(filter(X,rep(1/13,13), col='blue'))
lines(filter(X,rep(1/13,13), col='red'))
lines(filter(X,rep(1/13,13), col="blue"))
lines(filter(X,rep(1/13,13),col='blue'))
lines(filter(X,rep(1/13,13),col='red'))
lines(filter(X,rep(1/13,13)),col='blue')
lines(filter(X,rep(1/13,13)),col='red')
lines(filter(X,rep(1/13,13)),col='red')
plot(X)
lines(filter(X,rep(1/13,13)),col='red')
help("optim")
ksmooth(time(X), X, kernel = normal, bandwidth = 2)
ksmooth(time(X), X, kernel = "normal", bandwidth = 2)
?ksmooth
T=ksmooth(time(X), X, kernel = "normal", bandwidth = 2)
lines(T)
lines(T, col='blue')
T=ksmooth(time(X), X, kernel = "normal", bandwidth = 2)$1
T
T=ksmooth(time(X), X, kernel = "normal", bandwidth = 2)$x
lines(T, col='blue')
T=ksmooth(time(X), X, kernel = "normal", bandwidth = 2)$y
lines(T, col='blue')
lines(T, col='blue')
lines(T, col='blue')
lines(T, col='blue')
T=stl(X,"per")$time.series[,"trend"]
T=ksmooth(time(X), X, kernel = "normal", bandwidth = 2)$y
acf(X)
t=time(X)
reg=lm(X~t)
D=lsfit(t,X)
filter?
?filter
?filter
?lag
x=rep(1,12)
lag(x,-1)
?filter
x <- 1:100
filter(x, rep(1, 3))
?decompose
acf(X)
plot(X)
plot(co2)
X=diff(co2,12)
?diff
diff(1:10, 2)
diff(1:10, 2, 2)
x=1:10
diff(X, 2)
diff(x, 2)
plot(filter(X,rep(1/13,13)))
X=gtemp
plot(filter(X,rep(1/13,13)))
x=1:10
diff(x)
diff(x,2)
plot(diff(gtemp))
lag(gtemp)
lag(x)
lag(x,-1)
acf(X)
?acf
acf(X, lag.max = 2)
X1=arima.sim( n = 500 , list ( ar =c(3/2,-3/4) ))
plot(X1)
acf(AirPassengers)
acf(gtemp)
?acf2
pacf?
?pacf
?pacf
acf(ldeaths)
acf(ldeaths, ci.type = "ma")
plot(acf(X), ci = 0.95)
plot(acf(X), ci = 0.95)
acf(X)
acf(X)
plot(acf(X), ci = 0.95)
acf(AirPassengers)
Acf
?acf
plot(x = )
plot(X)
plot(log(X))
plot(X)
?itsmr
??istmr
?yw
??yw
install.packages(itsmr)`
install.packages(itsmr)
install.packages('itsmr')
install.packages("istr")
install.packages("istr")
install.packages("istr")
install.packages("istr")
library("istr")
acf(X)
acf(X)[[1]][2]
acf(X)[[1]][1]
acf(X, plot= FALSE, lag.max=2)
acf(AirPassengers, plot= FALSE, lag.max=2)
acf(X, plot= FALSE, lag.max=2)
?acf
acf(X, type = covariance)
acf(X, type = [covariance])
acf(X, type = 'covariance', plot= FALSE)
acf(X1, type = 'covariance', plot= FALSE)
X1=arima.sim( n = 500 , list ( ar =c(3/2,-3/4) ))
acf(X1, type = 'covariance, plot= FALSE)
acf(X1, type = 'covariance, plot= FALSE)
acf(X1, type = 'covariance', plot= FALSE)
X1=arima.sim( n = 500 , list ( ar =c(3/2,-3/4) ))
plot(X1)
acf(X1, type = 'covariance', plot= FALSE)
X1=arima.sim( n = 500 , list ( ar =c(3/2,-3/4) ))
acf(X1, type = 'covariance', plot= FALSE)
acf(X1, type = 'covariance', plot= FALSE)
acf(X1, type = 'covariance', plot= FALSE)
X1=arima.sim( n = 500 , list ( ar =c(3/2,-3/4) ))
acf(X1, type = 'covariance', plot= FALSE)
X1=arima.sim( n = 500 , list ( ar =c(3/2,-3/4) ))
acf(X1, type = 'covariance', plot= FALSE)
X1=arima.sim( n = 500 , list ( ar =c(3/2,-3/4) ))
acf(X1, type = 'covariance', plot= FALSE)
X1=arima.sim( n = 500 , list ( ar =c(3/2,-3/4) ))
X1=arima.sim( n = 500 , list ( ar =c(3/2,-3/4) ))
acf(X1, type = 'covariance', plot= FALSE)
X1=arima.sim( n = 500 , list ( ar =c(3/2,-3/4) ))
acf(X1, type = 'covariance', plot= FALSE)
X1=arima.sim( n = 500 , list ( ar =c(3/2,-3/4) ))
acf(X1, type = 'covariance', plot= FALSE)
X1=arima.sim( n = 500 , list ( ar =c(3/2,-3/4) ))
acf(X1, type = 'covariance', plot= FALSE)
acf(X1, type = 'covariance', plot= FALSE)
acf(X1, type = 'covariance', plot= FALSE)[1]
acf(X, plot = FALSE)
rho_1=acf(X, plot = FALSE)[1]
rho_1
rep(1:12)
boxplot(X ~mois)
`mois=rep(1:12, length.out=length(X))
mois=rep(1:12, length.out=length(X))
mois
?str
X=c(245.872 ,  238.014 ,  263.227 ,  277.991 ,  286.691 ,  303.085 ,  256.801 ,  222.012 ,  279.87 ,   262.482 ,  232.68 ,   250.491 ,  253.207 ,  243.067 ,  285.105 ,  281.615 ,  295.914 ,  318.227 ,  269.288 ,  220.876 ,  292.226 ,  282.423 ,  259.679 ,  269.736 ,  297.836 ,  298.52 ,   321.846 ,  315.499 ,  320.499 ,  353.498 ,  297.567 ,  248.162 ,  318.171 ,  327.165 ,  290.611 ,  277.998 ,  329.673 ,  323.638 ,  376.079 ,  357.47 ,   356.857 ,  381.665 ,
329.881 ,  285.621 ,  346.323 ,  349.668 ,  312.503 ,  339.102 ,  344.498 ,  344.439 ,  386.41 ,   362.362 ,  343.875 ,  401.484 ,  352.111 ,  309.22 ,   377.684 ,  382.437 ,  338.143 ,  356.961 ,  361.309 ,  367.323 ,  412.595 ,
405.576 ,  384.74 ,   402.523 ,  378.002 ,  322.954 ,  403.606 ,  414.451 ,  363.939 ,  395.146 ,  399.926 ,  394.249 ,  442.815 ,  427.597 ,  421.828 ,  458.617 ,  405.451 ,  349.186 ,  433.709 ,  436.849 ,  400.391 ,  403.614 ,
415.292 ,  423.665 ,  478.207 ,  443.548 ,  464.162 ,  457.944 ,  440.436 ,  366.272 ,  457.318 ,  460.735 ,  413.933 ,  426.097 ,  443.7 ,    441.499 ,  480.649 ,  463.68 ,   453.372 ,  505.19 ,   445.332 ,  370.211 ,  435.473 ,
417.169 ,  370.169 ,  360.457 ,  398.975 ,  409.142 ,  465.646 ,  465.236 ,  437.93 ,   485.439 ,  451.417 ,  385.078 ,  459.356 ,  484.329 ,  408.187 ,  437.763 ,  430.628 ,  403.756 ,  458.183 ,  426.744 ,  404.592 ,  479.015 ,
462.442 ,  398.262 ,  458.043 ,  485.08 ,   413.487 ,  437.37 ,   429.065 ,  441.43 ,   478.753 ,  475.061 ,  474.817 ,  527.2 ,    479.388 ,  409.31 ,   483.457 ,  492.591 ,  426.665 ,  445.526 ,  466.357 ,  435.294 ,  492.367 ,
490.107 ,  511.749 ,  527.468 ,  505.762 ,  412.447 ,  504.54 ,   498.536 ,  443.591 ,  460.816 ,  461.062 ,  433.387 ,  492.955 ,  495.074 ,  532.645 ,  554.776 ,  514.559 ,  432.271 ,  521.352 ,  527.589 ,  460.029 ,  468.692 ,
456.595 ,  445.619 ,  520.146 ,  516.175 ,  522.612 ,  583.936 ,  557.37 ,   467.139 ,  548.977 ,  526.607)
X.ts=ts(X,start = c(1993,1), freq=12)
plot(X.ts)
plot(X.ts)
X.ts=ts(X,start = c(1993,1), freq=12)
plot(X.ts)
X=c(245.872 ,  238.014 ,  263.227 ,  277.991 ,  286.691 ,  303.085 ,  256.801 ,  222.012 ,  279.87 ,   262.482 ,  232.68 ,   250.491 ,  253.207 ,  243.067 ,  285.105 ,  281.615 ,  295.914 ,  318.227 ,  269.288 ,  220.876 ,  292.226 ,  282.423 ,  259.679 ,  269.736 ,  297.836 ,  298.52 ,   321.846 ,  315.499 ,  320.499 ,  353.498 ,  297.567 ,  248.162 ,  318.171 ,  327.165 ,  290.611 ,  277.998 ,  329.673 ,  323.638 ,  376.079 ,  357.47 ,   356.857 ,  381.665 ,
329.881 ,  285.621 ,  346.323 ,  349.668 ,  312.503 ,  339.102 ,  344.498 ,  344.439 ,  386.41 ,   362.362 ,  343.875 ,  401.484 ,  352.111 ,  309.22 ,   377.684 ,  382.437 ,  338.143 ,  356.961 ,  361.309 ,  367.323 ,  412.595 ,
405.576 ,  384.74 ,   402.523 ,  378.002 ,  322.954 ,  403.606 ,  414.451 ,  363.939 ,  395.146 ,  399.926 ,  394.249 ,  442.815 ,  427.597 ,  421.828 ,  458.617 ,  405.451 ,  349.186 ,  433.709 ,  436.849 ,  400.391 ,  403.614 ,
415.292 ,  423.665 ,  478.207 ,  443.548 ,  464.162 ,  457.944 ,  440.436 ,  366.272 ,  457.318 ,  460.735 ,  413.933 ,  426.097 ,  443.7 ,    441.499 ,  480.649 ,  463.68 ,   453.372 ,  505.19 ,   445.332 ,  370.211 ,  435.473 ,
417.169 ,  370.169 ,  360.457 ,  398.975 ,  409.142 ,  465.646 ,  465.236 ,  437.93 ,   485.439 ,  451.417 ,  385.078 ,  459.356 ,  484.329 ,  408.187 ,  437.763 ,  430.628 ,  403.756 ,  458.183 ,  426.744 ,  404.592 ,  479.015 ,
462.442 ,  398.262 ,  458.043 ,  485.08 ,   413.487 ,  437.37 ,   429.065 ,  441.43 ,   478.753 ,  475.061 ,  474.817 ,  527.2 ,    479.388 ,  409.31 ,   483.457 ,  492.591 ,  426.665 ,  445.526 ,  466.357 ,  435.294 ,  492.367 ,
490.107 ,  511.749 ,  527.468 ,  505.762 ,  412.447 ,  504.54 ,   498.536 ,  443.591 ,  460.816 ,  461.062 ,  433.387 ,  492.955 ,  495.074 ,  532.645 ,  554.776 ,  514.559 ,  432.271 ,  521.352 ,  527.589 ,  460.029 ,  468.692 ,
456.595 ,  445.619 ,  520.146 ,  516.175 ,  522.612 ,  583.936 ,  557.37 ,   467.139 ,  548.977 ,  526.607)
X.ts=ts(X,start = c(1993,1), freq=12)
plot(X.ts)
mean(X.ts)
mois=rep(1:12, length.out=length(X))
annees=rep(1993:2007, each=12, length.out=length(X))
boxplot(X ~mois)
boxplot(X ~annees)
xav=window(X.ts, start=c(1993,1),end=c(2001,8))
xav=ts(X.ts, start=c(1993,1),end=c(2001,8),freq=12)
plot(xav)
mod.nonpar=stl(xav,"per")
str(mod.nonpar)
n=101
x=arima.sim(n,model=list(ar=c(13/2,-3)))-5
x=arima.sim(n,model=list(ar=c(13/2,-3)))-5
x=arima.sim(n,model=list(ar=c(13/2,-3)))-5
x=arima.sim(n, model=list(ar=c(13/2,-3)))-5
z=rnorm(n)
x=filter(z,filter=c(13/2,-3), method="recursive")-5
plot(x)
y=rnorm(n)
x=arima.sim(n, list( ar=c(2/3,-1/12)))+10/12
x=arima.sim(n, list( ar=c(2/3,-1/12)))
x=arima.sim(n, model=list( ar=c(2/3,-1/12)))-10/12+y
plot(x)
?arima.sim
nrep=500;
nrep=500; n=101; pred=matrix(nrow = nrep, ncol = 6)
colnames(pred)=c('hat', 'star', 'kalmanfiler', 'starbis', 'kalmanfilerbis', 'true')
y=rnorm(n)
x=arima.sim(n, model=list( ar=c(2/3,-1/12)))+10/12+y
plot(x)
x=arima.sim(n, model=list( ar=c(2/3,-1/12)))+10/12+y
x
x$[101]
x$[101,]
x$[,101]
x[101]
x=arima.sim(n, model=list( ar=c(2/3,-1/12)))+10/12+y
x[101]
x=arima.sim(n, model=list( ar=c(2/3,-1/12)))+10/12+y
x
x[101]
pred
pred[i,6]=x[101]# On stock la derniére observation
pred[i,6]
pred[1,6]=x[101]# On stock la derniére observation
pred
?predict
x1=filter(z,filter=c(13/2,-3), method="recursive")-5
install.packages("forecast")
library(forecast)
x1=filter(z,filter=c(13/2,-3), method="recursive")-5
plot(x)
?Arima
pred[i,1]=Arima(x1)
pred[i,1]=Arima(x1, order = c(0,13/2,-3))
pred[i,1]=Arima(x1, order = c(2,0,0))
pred[i,1]=Arima(x1, order = c(2,0,0), fixed=c(rep(0,1),NA,NA))
x=arima.sim(n, model = list(ar=0.7 ma=-0.3)
x=arima.sim(n, model = list(ar=0.7 ma=-0.3))
x=arima.sim(n, model = list(ar=0.7 ma=-0.3))
x=arima.sim(n, model = list(ar=0.7 ,ma=-0.3))
acf(x)
ro1=acf(x)[[1]][1]
ro1
ro6=acf(x)[[1]][6]
ro1=acf(x)[[1]][1]
ro2=acf(x)[[1]][2]
ro3=acf(x)[[1]][3]
ro4=acf(x)[[1]][4]
ro5=acf(x)[[1]][5]
ro6=acf(x)[[1]][6]
nav=length(x)
new=data.frame(t=nav+1)
pred[i,2]=predict(x2, new, interval = "prediction")
x2=arima.sim(n, model=list( ar=c(2/3,-1/12)))+10/12+y
pred[i,2]=predict(x2, new, interval = "prediction")
pred[i,2]=predict(x2, new)
x2=arima.sim(n, model=list( ar=c(2/3,-1/12)))+10/12+y
x2=x2[-n]
pred[i,2]=predict(x2, new, interval = "prediction")
pred[i,2]=predict(x2, new)
x2=x2[-n]
pred[i,2]=predict(x2, new)
nav
x2=x2[-n]
nav=length(x2)
nav
pred[i,2]=predict(x2, new, interval="prediction")
pred[i,2]=predict(x2, new)
new=data.frame(t=nav+1)
pred[i,2]=predict(x2, new, interval= "prediction")
install.packages('TSA')
library(TSA)
X=data(beersales)
plot(x)
x
str(X)
plot(X)
X=data(beersales)
plot(X)
X=data(beersales)
plot(X)
length(x = )
length(X)
X=data(beersales)
X
install.packages('TSA')
library(TSA)
X=data(beersales)
plot(X)
X
?beersales
X=beersales
plot(X)
plot(X)
?SARIMA
install.packages("forecast")
install.packages("forecast")
library(forecast)
?SARIMA
x=arima.sim(n, model = list(ar=0.7))
acf(x)
ro1=acf(x)[[1]][1]
ro2=acf(x)[[1]][2]
ro3=acf(x)[[1]][3]
ro4=acf(x)[[1]][4]
ro5=acf(x)[[1]][5]
ro6=acf(x)[[1]][6]
A=matrix(c(ro1,ro2,ro3,ro4,ro5,ro6,ro6,ro5,ro4,ro3,ro2,ro1),nrow=6,ncol=6)
phi=solve(A)%*%ro  #phi chapeau
ro=c(ro1,ro2,ro3,ro4,ro5,ro6,ro6)
A=matrix(c(ro1,ro2,ro3,ro4,ro5,ro6,ro6,ro5,ro4,ro3,ro2,ro1),nrow=6,ncol=6) #Matrice des autocorrélations dans YULE WALKER
phi=solve(A)%*%ro  #phi chapeau
ro=c(ro1,ro2,ro3,ro4)
ro=c(ro1,ro2,ro3,ro4)
A=matrix(c(ro1,ro2,ro3,ro4,ro4,ro3,ro2,ro1),nrow=6,ncol=6) #Matrice des autocorrélations dans YULE WALKER
A=matrix(c(ro1,ro2,ro3,ro4,ro4,ro3,ro2,ro1),nrow=4,ncol=4) #Matrice des autocorrélations dans YULE WALKER
phi=solve(A)%*%ro  #phi chapeau
x=arima.sim(100,model=list(ar=0.7, ma=-.3), sd=2); mod=arima(x, order=c(1,0,1))
mod
a=mod$aic
a
AIC=mod$aic
mod$sd
mod
mod$sigma
ecart-type=sqrt(mod$sigma)
ecart_type=sqrt(mod$sigma)
y=rnorm(n)
x2=arima.sim(n, model=list( ar=c(2/3,-1/12)))+10/12+y
plot(x)
rho2=acf(x2)[[1]][3]
rho1=acf(x2)[[1]][2]
rho2=acf(x2)[[1]][3]
gamma0=acf(x2,type="covariance")[[1]][1]
ro=c(rho1, rho2)
gamma0=acf(x2,type="covariance")[[1]][1]
A=matrix(c(gamm0,rho1,rho2,rho2,rho1,gamma0),nrow=3,ncol=3)
A=matrix(c(gamma0,rho1,rho2,rho2,rho1,gamma0),nrow=3,ncol=3)
phi=solve(A)%*%ro
ro=c(gamma0,rho1, rho2)
A=matrix(c(gamma0,rho1,rho2,rho2,rho1,gamma0),nrow=3,ncol=3)
phi=solve(A)%*%ro
X=arima.sim(model=list(ar=c(3/2,-3/4)),n=500 ,sd = 1) #Notre processus
acf(X)
RHO1=acf(x)[[1]][2]
RHO2=acf(x)[[1]][3]
GAMMA0=acf(x,type="covariance")[[1]][1]
RO=c(RHO1,RHO2) #vecteur des corrélations dans YULE WALKER
A=matrix(c(1,RHO1,RHO1,1),nrow=2,ncol=2) #Matrice des autocorrélations dans YULE WALKER
phi=solve(A)%*%RO  #phi chapeau
phi=solve(A)%*%ro
A
A=matrix(c(gamma0,rho1,rho2,rho2,rho1,gamma0),nrow=3,ncol=3)
phi=solve(A)%*%ro
A
ro
solve(A)%%ro
solve(A)%ro
pred[i,1]=predict(x1, new, interval= "prediction")
predi=precdict(x, new, interval= "prediction" )
library(forecast)
nav=length(x2)
new=data.frame(t=nav+1)
predi=precdict(x, new, interval= "prediction" )
install.packages("forecast")
install.packages("forecast")
library(forecast)
predi=precdict(x, new, interval= "prediction" )
predi=predict(x, new, interval= "prediction" )
?predict
?predict.arima
?predict.arima
c=matrix(1:100,nrow =5 )
View(c)
1-1/20-1/19-1/18-1/17-1/16-1/15
r=c(re('l',19),r)
r=c(rep('l',19),r)
r=c(rep('l',19),'r')
sample(r,1)
?sample
p=0
for (i in 1:10000)
{
r=c(rep('l',19),'r')
e1=sample(r,1)
if ('r'==e1)
{ p=p+1}
r=r[-e1]
e2=sample(r,1)
if ('r'==e2)
{ p=p+1}
r=r[-e2]
e3=sample(r,1)
if ('r'==e3)
{ p=p+1}
r=r[-e3]
e4=sample(r,1)
if ('r'==e4)
{ p=p+1}
r=r[-e4]
e5=sample(r,1)
if ('r'==e5)
{ p=p+1}
r=r[-e5]
}
r=1:12
r(-1)
r-1]
r[-1]
x=1
x=2
r[-2]
r[-x]
p=0
for (i in 1:10000)
{
r=c(rep('l',19),'r')
e1=sample(r,1)
if ('r'==e1)
{ p=p+1}
r=r[-e1]
e2=sample(r,1)
if ('r'==e2)
{ p=p+1}
r=r[-e2]
e3=sample(r,1)
if ('r'==e3)
{ p=p+1}
r=r[-e3]
e4=sample(r,1)
if ('r'==e4)
{ p=p+1}
r=r[-e4]
e5=sample(r,1)
if ('r'==e5)
{ p=p+1}
r=r[-e5]
}
p=p/10000
e1
'r'=="l"
p=0
for (i in 1:10000)
{
r=c(rep('l',19),'r')
e1=sample(r,1)
if ('r'==e1)
{ p=p+1}
r=r[-e1]
e2=sample(r,1)
if ('r'==e2)
{ p=p+1}
r=r[-e2]
e3=sample(r,1)
if ('r'==e3)
{ p=p+1}
r=r[-e3]
e4=sample(r,1)
if ('r'==e4)
{ p=p+1}
r=r[-e4]
e5=sample(r,1)
if ('r'==e5)
{ p=p+1}
r=r[-e5]
}
p=p/10000
r=c(rep('l',19),'r')
e1=sample(r,1)
if ('r'==e1)
{ p=p+1}
r=r[-e1]
r[-e1]
r[-l]
r=c(rep('l',19),'r')
e1=sample(r,1)
e1=character(e1)
if ('r'==e1)
{ p=p+1}
r=r[-e1]
getwd()
setwd("/Users/cherifabass/Desktop/projet_dataviz")
setwd("/Users/cherifabass/Desktop/projet_dataviz/flightdataviz.github.io/tables/")
at=read.table(file = 'avia_par_at.tsv', sep = '\t', header = TRUE)
View(at)
View(at)
View(at)
cy=read.table(file = 'avia_par_cy.tsv', sep = '\t', header = TRUE)
View(cy)
View(cy)
